/* Generated by Yosys 0.55+115 (git sha1 8f6d7a304, clang++ 18.1.8 -fPIC -O3) */

module \$paramod\capdriver\Ndac=s32'00000000000000000000000000010000 (dac_state, dac_drive_invert, dac_drive);
  output [15:0] dac_drive;
  wire [15:0] dac_drive;
  input dac_drive_invert;
  wire dac_drive_invert;
  input [15:0] dac_state;
  wire [15:0] dac_state;
  CKXOR2D0LVT _00_ (
    .A1(dac_state[0]),
    .A2(dac_drive_invert),
    .Z(dac_drive[0])
  );
  CKXOR2D0LVT _01_ (
    .A1(dac_drive_invert),
    .A2(dac_state[1]),
    .Z(dac_drive[1])
  );
  CKXOR2D0LVT _02_ (
    .A1(dac_drive_invert),
    .A2(dac_state[2]),
    .Z(dac_drive[2])
  );
  CKXOR2D0LVT _03_ (
    .A1(dac_drive_invert),
    .A2(dac_state[3]),
    .Z(dac_drive[3])
  );
  CKXOR2D0LVT _04_ (
    .A1(dac_drive_invert),
    .A2(dac_state[4]),
    .Z(dac_drive[4])
  );
  CKXOR2D0LVT _05_ (
    .A1(dac_drive_invert),
    .A2(dac_state[5]),
    .Z(dac_drive[5])
  );
  CKXOR2D0LVT _06_ (
    .A1(dac_drive_invert),
    .A2(dac_state[6]),
    .Z(dac_drive[6])
  );
  CKXOR2D0LVT _07_ (
    .A1(dac_drive_invert),
    .A2(dac_state[7]),
    .Z(dac_drive[7])
  );
  CKXOR2D0LVT _08_ (
    .A1(dac_drive_invert),
    .A2(dac_state[8]),
    .Z(dac_drive[8])
  );
  CKXOR2D0LVT _09_ (
    .A1(dac_drive_invert),
    .A2(dac_state[9]),
    .Z(dac_drive[9])
  );
  CKXOR2D0LVT _10_ (
    .A1(dac_drive_invert),
    .A2(dac_state[10]),
    .Z(dac_drive[10])
  );
  CKXOR2D0LVT _11_ (
    .A1(dac_drive_invert),
    .A2(dac_state[11]),
    .Z(dac_drive[11])
  );
  CKXOR2D0LVT _12_ (
    .A1(dac_drive_invert),
    .A2(dac_state[12]),
    .Z(dac_drive[12])
  );
  CKXOR2D0LVT _13_ (
    .A1(dac_drive_invert),
    .A2(dac_state[13]),
    .Z(dac_drive[13])
  );
  CKXOR2D0LVT _14_ (
    .A1(dac_drive_invert),
    .A2(dac_state[14]),
    .Z(dac_drive[14])
  );
  CKXOR2D0LVT _15_ (
    .A1(dac_drive_invert),
    .A2(dac_state[15]),
    .Z(dac_drive[15])
  );
endmodule

module \$paramod\salogic\Ndac=s32'00000000000000000000000000010000 (clk_init, clk_update, dac_astate, dac_bstate, dac_mode, comp, dac_state);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  input clk_init;
  wire clk_init;
  input clk_update;
  wire clk_update;
  input comp;
  wire comp;
  input [15:0] dac_astate;
  wire [15:0] dac_astate;
  input [15:0] dac_bstate;
  wire [15:0] dac_bstate;
  wire [15:0] dac_cycle;
  input dac_mode;
  wire dac_mode;
  output [15:0] dac_state;
  wire [15:0] dac_state;
  CKND0LVT _18_ (
    .I(clk_init),
    .ZN(_01_)
  );
  NR2D0LVT _19_ (
    .A1(clk_init),
    .A2(dac_mode),
    .ZN(_00_)
  );
  INR2D0LVT _20_ (
    .A1(dac_bstate[0]),
    .B1(dac_mode),
    .ZN(_02_)
  );
  INR2D0LVT _21_ (
    .A1(dac_bstate[1]),
    .B1(dac_mode),
    .ZN(_09_)
  );
  INR2D0LVT _22_ (
    .A1(dac_bstate[2]),
    .B1(dac_mode),
    .ZN(_10_)
  );
  INR2D0LVT _23_ (
    .A1(dac_bstate[3]),
    .B1(dac_mode),
    .ZN(_11_)
  );
  INR2D0LVT _24_ (
    .A1(dac_bstate[4]),
    .B1(dac_mode),
    .ZN(_12_)
  );
  INR2D0LVT _25_ (
    .A1(dac_bstate[5]),
    .B1(dac_mode),
    .ZN(_13_)
  );
  INR2D0LVT _26_ (
    .A1(dac_bstate[6]),
    .B1(dac_mode),
    .ZN(_14_)
  );
  INR2D0LVT _27_ (
    .A1(dac_bstate[7]),
    .B1(dac_mode),
    .ZN(_15_)
  );
  INR2D0LVT _28_ (
    .A1(dac_bstate[8]),
    .B1(dac_mode),
    .ZN(_16_)
  );
  INR2D0LVT _29_ (
    .A1(dac_bstate[9]),
    .B1(dac_mode),
    .ZN(_17_)
  );
  INR2D0LVT _30_ (
    .A1(dac_bstate[10]),
    .B1(dac_mode),
    .ZN(_03_)
  );
  INR2D0LVT _31_ (
    .A1(dac_bstate[11]),
    .B1(dac_mode),
    .ZN(_04_)
  );
  INR2D0LVT _32_ (
    .A1(dac_bstate[12]),
    .B1(dac_mode),
    .ZN(_05_)
  );
  INR2D0LVT _33_ (
    .A1(dac_bstate[13]),
    .B1(dac_mode),
    .ZN(_06_)
  );
  INR2D0LVT _34_ (
    .A1(dac_bstate[14]),
    .B1(dac_mode),
    .ZN(_07_)
  );
  MUX2D0LVT _35_ (
    .I0(dac_bstate[15]),
    .I1(comp),
    .S(dac_mode),
    .Z(_08_)
  );
  DFQD1LVT _36_ (
    .CP(clk_init),
    .D(dac_astate[0]),
    .Q(dac_state[0])
  );
  DFQD1LVT _37_ (
    .CP(clk_init),
    .D(dac_astate[1]),
    .Q(dac_state[1])
  );
  DFQD1LVT _38_ (
    .CP(clk_init),
    .D(dac_astate[2]),
    .Q(dac_state[2])
  );
  DFQD1LVT _39_ (
    .CP(clk_init),
    .D(dac_astate[3]),
    .Q(dac_state[3])
  );
  DFQD1LVT _40_ (
    .CP(clk_init),
    .D(dac_astate[4]),
    .Q(dac_state[4])
  );
  DFQD1LVT _41_ (
    .CP(clk_init),
    .D(dac_astate[5]),
    .Q(dac_state[5])
  );
  DFQD1LVT _42_ (
    .CP(clk_init),
    .D(dac_astate[6]),
    .Q(dac_state[6])
  );
  DFQD1LVT _43_ (
    .CP(clk_init),
    .D(dac_astate[7]),
    .Q(dac_state[7])
  );
  DFQD1LVT _44_ (
    .CP(clk_init),
    .D(dac_astate[8]),
    .Q(dac_state[8])
  );
  DFQD1LVT _45_ (
    .CP(clk_init),
    .D(dac_astate[9]),
    .Q(dac_state[9])
  );
  DFQD1LVT _46_ (
    .CP(clk_init),
    .D(dac_astate[10]),
    .Q(dac_state[10])
  );
  DFQD1LVT _47_ (
    .CP(clk_init),
    .D(dac_astate[11]),
    .Q(dac_state[11])
  );
  DFQD1LVT _48_ (
    .CP(clk_init),
    .D(dac_astate[12]),
    .Q(dac_state[12])
  );
  DFQD1LVT _49_ (
    .CP(clk_init),
    .D(dac_astate[13]),
    .Q(dac_state[13])
  );
  DFQD1LVT _50_ (
    .CP(clk_init),
    .D(dac_astate[14]),
    .Q(dac_state[14])
  );
  DFQD1LVT _51_ (
    .CP(clk_init),
    .D(dac_astate[15]),
    .Q(dac_state[15])
  );
  EDFQD1LVT _52_ (
    .CP(clk_update),
    .D(_08_),
    .E(_01_),
    .Q(dac_state[15])
  );
  EDFQD1LVT _53_ (
    .CP(clk_update),
    .D(_02_),
    .E(_00_),
    .Q(dac_state[0])
  );
  EDFQD1LVT _54_ (
    .CP(clk_update),
    .D(_07_),
    .E(_00_),
    .Q(dac_state[14])
  );
  EDFQD1LVT _55_ (
    .CP(clk_update),
    .D(_06_),
    .E(_00_),
    .Q(dac_state[13])
  );
  EDFQD1LVT _56_ (
    .CP(clk_update),
    .D(_05_),
    .E(_00_),
    .Q(dac_state[12])
  );
  EDFQD1LVT _57_ (
    .CP(clk_update),
    .D(_04_),
    .E(_00_),
    .Q(dac_state[11])
  );
  EDFQD1LVT _58_ (
    .CP(clk_update),
    .D(_03_),
    .E(_00_),
    .Q(dac_state[10])
  );
  EDFQD1LVT _59_ (
    .CP(clk_update),
    .D(_17_),
    .E(_00_),
    .Q(dac_state[9])
  );
  EDFQD1LVT _60_ (
    .CP(clk_update),
    .D(_16_),
    .E(_00_),
    .Q(dac_state[8])
  );
  EDFQD1LVT _61_ (
    .CP(clk_update),
    .D(_15_),
    .E(_00_),
    .Q(dac_state[7])
  );
  EDFQD1LVT _62_ (
    .CP(clk_update),
    .D(_14_),
    .E(_00_),
    .Q(dac_state[6])
  );
  EDFQD1LVT _63_ (
    .CP(clk_update),
    .D(_13_),
    .E(_00_),
    .Q(dac_state[5])
  );
  EDFQD1LVT _64_ (
    .CP(clk_update),
    .D(_12_),
    .E(_00_),
    .Q(dac_state[4])
  );
  EDFQD1LVT _65_ (
    .CP(clk_update),
    .D(_11_),
    .E(_00_),
    .Q(dac_state[3])
  );
  EDFQD1LVT _66_ (
    .CP(clk_update),
    .D(_10_),
    .E(_00_),
    .Q(dac_state[2])
  );
  EDFQD1LVT _67_ (
    .CP(clk_update),
    .D(_09_),
    .E(_00_),
    .Q(dac_state[1])
  );
  assign dac_cycle = 16'h8000;
endmodule

module adc(seq_init, seq_samp, seq_comp, seq_update, en_init, en_samp_p, en_samp_n, en_comp, en_update_p, en_update_n, dac_mode_p, dac_astate_p, dac_bstate_p, dac_mode_n, dac_astate_n, dac_bstate_n, dac_diffcaps, vin_p, vin_n, rst, comp_out
);
  wire clk_comp;
  wire clk_init;
  wire clk_samp_n;
  wire clk_samp_p;
  wire clk_update_n;
  wire clk_update_p;
  output comp_out;
  wire comp_out;
  wire comp_out_n;
  wire comp_out_p;
  input [15:0] dac_astate_n;
  wire [15:0] dac_astate_n;
  input [15:0] dac_astate_p;
  wire [15:0] dac_astate_p;
  input [15:0] dac_bstate_n;
  wire [15:0] dac_bstate_n;
  input [15:0] dac_bstate_p;
  wire [15:0] dac_bstate_p;
  wire [15:0] dac_cap_botplate_n;
  wire [15:0] dac_cap_botplate_p;
  input dac_diffcaps;
  wire dac_diffcaps;
  input dac_mode_n;
  wire dac_mode_n;
  input dac_mode_p;
  wire dac_mode_p;
  wire [15:0] dac_state_n;
  wire [15:0] dac_state_p;
  input en_comp;
  wire en_comp;
  input en_init;
  wire en_init;
  input en_samp_n;
  wire en_samp_n;
  input en_samp_p;
  wire en_samp_p;
  input en_update_n;
  wire en_update_n;
  input en_update_p;
  wire en_update_p;
  input rst;
  wire rst;
  input seq_comp;
  wire seq_comp;
  input seq_init;
  wire seq_init;
  input seq_samp;
  wire seq_samp;
  input seq_update;
  wire seq_update;
  wire vdac_n;
  wire vdac_p;
  inout vin_n;
  wire vin_n;
  inout vin_p;
  wire vin_p;
  caparray #(
    .Ndac(32'sd16)
  ) caparray_n (
    .cap_botplate(dac_cap_botplate_n),
    .cap_topplate(vdac_n)
  );
  caparray #(
    .Ndac(32'sd16)
  ) caparray_p (
    .cap_botplate(dac_cap_botplate_p),
    .cap_topplate(vdac_p)
  );
  \$paramod\capdriver\Ndac=s32'00000000000000000000000000010000  capdriver_n (
    .dac_drive(dac_cap_botplate_n),
    .dac_drive_invert(1'h0),
    .dac_state(dac_state_n)
  );
  \$paramod\capdriver\Ndac=s32'00000000000000000000000000010000  capdriver_p (
    .dac_drive(dac_cap_botplate_p),
    .dac_drive_invert(1'h0),
    .dac_state(dac_state_p)
  );
  clkgate clkgate_inst (
    .clk_comp(clk_comp),
    .clk_init(clk_init),
    .clk_samp_n(clk_samp_n),
    .clk_samp_p(clk_samp_p),
    .clk_update_n(clk_update_n),
    .clk_update_p(clk_update_p),
    .en_comp(en_comp),
    .en_init(en_init),
    .en_samp_n(en_samp_n),
    .en_samp_p(en_samp_p),
    .en_update_n(en_update_n),
    .en_update_p(en_update_p),
    .seq_comp(seq_comp),
    .seq_init(seq_init),
    .seq_samp(seq_samp),
    .seq_update(seq_update)
  );
  comp comp (
    .clk(clk_comp),
    .vin_n(vdac_n),
    .vin_p(vdac_p),
    .vout_n(comp_out_n),
    .vout_p(comp_out_p)
  );
  \$paramod\salogic\Ndac=s32'00000000000000000000000000010000  salogic_n (
    .clk_init(clk_init),
    .clk_update(clk_update_n),
    .comp(comp_out_p),
    .dac_astate(dac_astate_n),
    .dac_bstate(dac_bstate_n),
    .dac_mode(dac_mode_n),
    .dac_state(dac_state_n)
  );
  \$paramod\salogic\Ndac=s32'00000000000000000000000000010000  salogic_p (
    .clk_init(clk_init),
    .clk_update(clk_update_p),
    .comp(comp_out_n),
    .dac_astate(dac_astate_p),
    .dac_bstate(dac_bstate_p),
    .dac_mode(dac_mode_p),
    .dac_state(dac_state_p)
  );
  sampswitch samp_n (
    .clk(clk_samp_n),
    .vin(vin_n),
    .vout(vdac_n)
  );
  sampswitch samp_p (
    .clk(clk_samp_p),
    .vin(vin_p),
    .vout(vdac_p)
  );
  assign comp_out = comp_out_p;
endmodule

module clkgate(seq_init, seq_samp, seq_comp, seq_update, en_init, en_samp_p, en_samp_n, en_comp, en_update_p, en_update_n, clk_init, clk_samp_p, clk_samp_n, clk_comp, clk_update_p, clk_update_n);
  output clk_comp;
  wire clk_comp;
  output clk_init;
  wire clk_init;
  output clk_samp_n;
  wire clk_samp_n;
  output clk_samp_p;
  wire clk_samp_p;
  output clk_update_n;
  wire clk_update_n;
  output clk_update_p;
  wire clk_update_p;
  input en_comp;
  wire en_comp;
  input en_init;
  wire en_init;
  input en_samp_n;
  wire en_samp_n;
  input en_samp_p;
  wire en_samp_p;
  input en_update_n;
  wire en_update_n;
  input en_update_p;
  wire en_update_p;
  input seq_comp;
  wire seq_comp;
  input seq_init;
  wire seq_init;
  input seq_samp;
  wire seq_samp;
  input seq_update;
  wire seq_update;
  AN2D0LVT _0_ (
    .A1(seq_init),
    .A2(en_init),
    .Z(clk_init)
  );
  AN2D0LVT _1_ (
    .A1(seq_samp),
    .A2(en_samp_p),
    .Z(clk_samp_p)
  );
  AN2D0LVT _2_ (
    .A1(seq_samp),
    .A2(en_samp_n),
    .Z(clk_samp_n)
  );
  AN2D0LVT _3_ (
    .A1(seq_comp),
    .A2(en_comp),
    .Z(clk_comp)
  );
  AN2D0LVT _4_ (
    .A1(seq_update),
    .A2(en_update_p),
    .Z(clk_update_p)
  );
  AN2D0LVT _5_ (
    .A1(seq_update),
    .A2(en_update_n),
    .Z(clk_update_n)
  );
endmodule
