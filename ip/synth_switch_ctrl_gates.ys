# Physical-level synthesis script for discrete logic gates
# Targets: NAND, NOR, NOT, MUX, DFF (no PDK mapping)
# Usage: yosys -s synth_switch_ctrl_gates.ys

# Read the Verilog source
read_verilog switch_ctrl.v

# Set the top module
hierarchy -top switch_ctrl -check

# Print initial statistics
stat

# Perform full synthesis to get everything ready
synth -top switch_ctrl

# Convert to basic logic gates using ABC with specific gate library
# This maps to discrete NAND, NOR gates (NOT is automatic), plus MUX
# Since switch_ctrl is purely combinational (just AND gates), this will be simple
abc -g gates -dff       # Full gate set: AND, NAND, OR, NOR, XOR, XNOR, ANDNOT, ORNOT

# Clean up the netlist
opt_clean

# Print statistics showing discrete gate count
stat

# Generate outputs with clean gate-level netlist
write_verilog -noattr -noexpr synth_switch_ctrl_gates.v
write_json synth_switch_ctrl_gates.json
write_blif synth_switch_ctrl_gates.blif

# Create dot file for gate-level visualization
show -prefix switch_ctrl_gates -format dot -stretch

# Print final gate count summary
tee -o synth_switch_ctrl_gates_report.txt stat
